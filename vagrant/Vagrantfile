# -*- mode: ruby -*-
# vi: set ft=ruby :

shell_install = <<-EOF_install
codename=$(lsb_release -a 2>/dev/null| grep -i codename | awk '{print $2}')
wget https://apt.puppet.com/puppet-release-${codename}.deb
sudo dpkg -i puppet-release-${codename}.deb
sudo apt-get update
sudo apt-get install -o Dpkg::Options::="--force-confold"  -y puppet-agent
sudo apt-get install -o Dpkg::Options::="--force-confold"  -y r10k
EOF_install

r10k_run = <<-EOF_run
cd /etc/puppetlabs/code/environments/vagrant
/usr/bin/r10k puppetfile install -v
EOF_run

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure('2') do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = 'bento/debian-10'

  # provide module in VM
  config.vm.synced_folder './control', '/etc/puppetlabs/code/environments/vagrant'
  config.vm.synced_folder '../', '/etc/puppetlabs/code/environments/vagrant/modules/rabbitmq'
  config.vm.synced_folder './puppet', '/etc/puppetlabs/puppet'
  config.vm.synced_folder './r10k', '/etc/puppetlabs/r10k'

  config.vm.provision 'install_puppet',
                      type: 'shell',
                      inline: shell_install

  config.vm.provision 'r10k_run',
                      type: 'shell',
                      inline: r10k_run

  config.vm.provision 'puppet_module', type: 'puppet' do |puppet|
    # puppet.environment_variables  = { "modulepath" => "/vagrant/modules/", :environment => "module_test" }
    # puppet.options = "--verbose --debug"
    puppet.manifests_path = 'puppet/manifests'
    # puppet.environment_path = "puppet/env"
    puppet.manifest_file = 'default.pp'
    # puppet.environment = "moduletest"
    puppet.options = '--verbose'
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
